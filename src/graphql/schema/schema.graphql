# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

# A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar DateTime

# A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar Date

# The `BigInt` scalar type represents non-fractional signed whole numeric values.
scalar Long

# The `Upload` scalar type represents a file upload.
scalar Upload

type Pagination {
    total: Int!
    page: Int!
    pageSize: Int!
    pageCount: Int!
}

type ResponseCollectionMeta {
    pagination: Pagination!
}

input IDFilterInput {
    and: [ID]
    or: [ID]
    not: IDFilterInput
    eq: ID
    eqi: ID
    ne: ID
    nei: ID
    startsWith: ID
    endsWith: ID
    contains: ID
    notContains: ID
    containsi: ID
    notContainsi: ID
    gt: ID
    gte: ID
    lt: ID
    lte: ID
    null: Boolean
    notNull: Boolean
    in: [ID]
    notIn: [ID]
    between: [ID]
}

input BooleanFilterInput {
    and: [Boolean]
    or: [Boolean]
    not: BooleanFilterInput
    eq: Boolean
    eqi: Boolean
    ne: Boolean
    nei: Boolean
    startsWith: Boolean
    endsWith: Boolean
    contains: Boolean
    notContains: Boolean
    containsi: Boolean
    notContainsi: Boolean
    gt: Boolean
    gte: Boolean
    lt: Boolean
    lte: Boolean
    null: Boolean
    notNull: Boolean
    in: [Boolean]
    notIn: [Boolean]
    between: [Boolean]
}

input StringFilterInput {
    and: [String]
    or: [String]
    not: StringFilterInput
    eq: String
    eqi: String
    ne: String
    nei: String
    startsWith: String
    endsWith: String
    contains: String
    notContains: String
    containsi: String
    notContainsi: String
    gt: String
    gte: String
    lt: String
    lte: String
    null: Boolean
    notNull: Boolean
    in: [String]
    notIn: [String]
    between: [String]
}

input IntFilterInput {
    and: [Int]
    or: [Int]
    not: IntFilterInput
    eq: Int
    eqi: Int
    ne: Int
    nei: Int
    startsWith: Int
    endsWith: Int
    contains: Int
    notContains: Int
    containsi: Int
    notContainsi: Int
    gt: Int
    gte: Int
    lt: Int
    lte: Int
    null: Boolean
    notNull: Boolean
    in: [Int]
    notIn: [Int]
    between: [Int]
}

input LongFilterInput {
    and: [Long]
    or: [Long]
    not: LongFilterInput
    eq: Long
    eqi: Long
    ne: Long
    nei: Long
    startsWith: Long
    endsWith: Long
    contains: Long
    notContains: Long
    containsi: Long
    notContainsi: Long
    gt: Long
    gte: Long
    lt: Long
    lte: Long
    null: Boolean
    notNull: Boolean
    in: [Long]
    notIn: [Long]
    between: [Long]
}

input FloatFilterInput {
    and: [Float]
    or: [Float]
    not: FloatFilterInput
    eq: Float
    eqi: Float
    ne: Float
    nei: Float
    startsWith: Float
    endsWith: Float
    contains: Float
    notContains: Float
    containsi: Float
    notContainsi: Float
    gt: Float
    gte: Float
    lt: Float
    lte: Float
    null: Boolean
    notNull: Boolean
    in: [Float]
    notIn: [Float]
    between: [Float]
}

input DateFilterInput {
    and: [Date]
    or: [Date]
    not: DateFilterInput
    eq: Date
    eqi: Date
    ne: Date
    nei: Date
    startsWith: Date
    endsWith: Date
    contains: Date
    notContains: Date
    containsi: Date
    notContainsi: Date
    gt: Date
    gte: Date
    lt: Date
    lte: Date
    null: Boolean
    notNull: Boolean
    in: [Date]
    notIn: [Date]
    between: [Date]
}

input DateTimeFilterInput {
    and: [DateTime]
    or: [DateTime]
    not: DateTimeFilterInput
    eq: DateTime
    eqi: DateTime
    ne: DateTime
    nei: DateTime
    startsWith: DateTime
    endsWith: DateTime
    contains: DateTime
    notContains: DateTime
    containsi: DateTime
    notContainsi: DateTime
    gt: DateTime
    gte: DateTime
    lt: DateTime
    lte: DateTime
    null: Boolean
    notNull: Boolean
    in: [DateTime]
    notIn: [DateTime]
    between: [DateTime]
}

input JSONFilterInput {
    and: [JSON]
    or: [JSON]
    not: JSONFilterInput
    eq: JSON
    eqi: JSON
    ne: JSON
    nei: JSON
    startsWith: JSON
    endsWith: JSON
    contains: JSON
    notContains: JSON
    containsi: JSON
    notContainsi: JSON
    gt: JSON
    gte: JSON
    lt: JSON
    lte: JSON
    null: Boolean
    notNull: Boolean
    in: [JSON]
    notIn: [JSON]
    between: [JSON]
}

enum ENUM_COMPONENTCOMMONADDRESS_STATE {
    Johor
    Kedah
    Kelantan
    Melaka
    Negeri_Sembilan
    Pahang
    Penang
    Perak
    Perlis
    Sabah
    Sarawak
    Selangor
    Terengganu
    Wilayah_Persekutuan_Kuala_Lumpur
    Wilayah_Persekutuan_Labuan
    Wilayah_Persekutuan_Putrajaya
}

input ComponentCommonAddressFiltersInput {
    addressLine1: StringFilterInput
    addressLine2: StringFilterInput
    postalCode: LongFilterInput
    city: StringFilterInput
    state: StringFilterInput
    and: [ComponentCommonAddressFiltersInput]
    or: [ComponentCommonAddressFiltersInput]
    not: ComponentCommonAddressFiltersInput
}

input ComponentCommonAddressInput {
    id: ID
    addressLine1: String
    addressLine2: String
    postalCode: Long
    city: String
    state: ENUM_COMPONENTCOMMONADDRESS_STATE
}

type ComponentCommonAddress {
    id: ID!
    addressLine1: String
    addressLine2: String
    postalCode: Long
    city: String
    state: ENUM_COMPONENTCOMMONADDRESS_STATE!
}

input ComponentCommonTrainingItemsFiltersInput {
    training: TrainingFiltersInput
    and: [ComponentCommonTrainingItemsFiltersInput]
    or: [ComponentCommonTrainingItemsFiltersInput]
    not: ComponentCommonTrainingItemsFiltersInput
}

input ComponentCommonTrainingItemsInput {
    id: ID
    training: ID
    certificate: ID
}

type ComponentCommonTrainingItems {
    id: ID!
    training: TrainingEntityResponse
    certificate: UploadFileEntityResponse!
}

input ComponentParticipantJobInformationFiltersInput {
    titlePosition: StringFilterInput
    company: StringFilterInput
    workPhone: LongFilterInput
    workEmail: StringFilterInput
    workAddress: ComponentCommonAddressFiltersInput
    and: [ComponentParticipantJobInformationFiltersInput]
    or: [ComponentParticipantJobInformationFiltersInput]
    not: ComponentParticipantJobInformationFiltersInput
}

input ComponentParticipantJobInformationInput {
    id: ID
    titlePosition: String
    company: String
    workPhone: Long
    workEmail: String
    workAddress: ComponentCommonAddressInput
}

type ComponentParticipantJobInformation {
    id: ID!
    titlePosition: String
    company: String
    workPhone: Long
    workEmail: String
    workAddress: ComponentCommonAddress
}

enum ENUM_COMPONENTPARTICIPANTPERSONALDETAILS_GENDER {
    Female
    Male
}

input ComponentParticipantPersonalDetailsFiltersInput {
    firstName: StringFilterInput
    lastName: StringFilterInput
    fullName: StringFilterInput
    gender: StringFilterInput
    dateOfBirth: DateFilterInput
    phoneNumber: LongFilterInput
    homeNumber: LongFilterInput
    residentialAddress: ComponentCommonAddressFiltersInput
    and: [ComponentParticipantPersonalDetailsFiltersInput]
    or: [ComponentParticipantPersonalDetailsFiltersInput]
    not: ComponentParticipantPersonalDetailsFiltersInput
}

input ComponentParticipantPersonalDetailsInput {
    id: ID
    firstName: String
    lastName: String
    fullName: String
    gender: ENUM_COMPONENTPARTICIPANTPERSONALDETAILS_GENDER
    dateOfBirth: Date
    phoneNumber: Long
    homeNumber: Long
    residentialAddress: ComponentCommonAddressInput
}

type ComponentParticipantPersonalDetails {
    id: ID!
    firstName: String
    lastName: String
    fullName: String
    gender: ENUM_COMPONENTPARTICIPANTPERSONALDETAILS_GENDER
    dateOfBirth: Date
    phoneNumber: Long
    homeNumber: Long
    residentialAddress: ComponentCommonAddress
}

input ParticipantFiltersInput {
    id: IDFilterInput
    personalDetails: ComponentParticipantPersonalDetailsFiltersInput
    jobInformation: ComponentParticipantJobInformationFiltersInput
    trainings: ComponentCommonTrainingItemsFiltersInput
    auth: UsersPermissionsUserFiltersInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    and: [ParticipantFiltersInput]
    or: [ParticipantFiltersInput]
    not: ParticipantFiltersInput
}

input ParticipantInput {
    personalDetails: ComponentParticipantPersonalDetailsInput
    jobInformation: ComponentParticipantJobInformationInput
    trainings: [ComponentCommonTrainingItemsInput]
    auth: ID
}

type Participant {
    personalDetails: ComponentParticipantPersonalDetails
    jobInformation: ComponentParticipantJobInformation
    trainings(
        filters: ComponentCommonTrainingItemsFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
    ): [ComponentCommonTrainingItems]
    auth: UsersPermissionsUserEntityResponse
    createdAt: DateTime
    updatedAt: DateTime
}

type ParticipantEntity {
    id: ID
    attributes: Participant
}

type ParticipantEntityResponse {
    data: ParticipantEntity
}

type ParticipantEntityResponseCollection {
    data: [ParticipantEntity!]!
    meta: ResponseCollectionMeta!
}

enum ENUM_TRAINING_TYPE {
    Type_I
    Type_II
    Type_III
}

input TrainingFiltersInput {
    id: IDFilterInput
    code: StringFilterInput
    name: StringFilterInput
    dateValidity: DateFilterInput
    type: StringFilterInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    and: [TrainingFiltersInput]
    or: [TrainingFiltersInput]
    not: TrainingFiltersInput
}

input TrainingInput {
    code: String
    name: String
    dateValidity: Date
    type: ENUM_TRAINING_TYPE
}

type Training {
    code: String!
    name: String!
    dateValidity: Date
    type: ENUM_TRAINING_TYPE!
    createdAt: DateTime
    updatedAt: DateTime
}

type TrainingEntity {
    id: ID
    attributes: Training
}

type TrainingEntityResponse {
    data: TrainingEntity
}

type TrainingEntityResponseCollection {
    data: [TrainingEntity!]!
    meta: ResponseCollectionMeta!
}

input UploadFileFiltersInput {
    id: IDFilterInput
    name: StringFilterInput
    alternativeText: StringFilterInput
    caption: StringFilterInput
    width: IntFilterInput
    height: IntFilterInput
    formats: JSONFilterInput
    hash: StringFilterInput
    ext: StringFilterInput
    mime: StringFilterInput
    size: FloatFilterInput
    url: StringFilterInput
    previewUrl: StringFilterInput
    provider: StringFilterInput
    provider_metadata: JSONFilterInput
    folder: UploadFolderFiltersInput
    folderPath: StringFilterInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    and: [UploadFileFiltersInput]
    or: [UploadFileFiltersInput]
    not: UploadFileFiltersInput
}

input UploadFileInput {
    name: String
    alternativeText: String
    caption: String
    width: Int
    height: Int
    formats: JSON
    hash: String
    ext: String
    mime: String
    size: Float
    url: String
    previewUrl: String
    provider: String
    provider_metadata: JSON
    folder: ID
    folderPath: String
}

type UploadFile {
    name: String!
    alternativeText: String
    caption: String
    width: Int
    height: Int
    formats: JSON
    hash: String!
    ext: String
    mime: String!
    size: Float!
    url: String!
    previewUrl: String
    provider: String!
    provider_metadata: JSON
    related: [GenericMorph]
    createdAt: DateTime
    updatedAt: DateTime
}

type UploadFileEntity {
    id: ID
    attributes: UploadFile
}

type UploadFileEntityResponse {
    data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
    data: [UploadFileEntity!]!
    meta: ResponseCollectionMeta!
}

type UploadFileRelationResponseCollection {
    data: [UploadFileEntity!]!
}

input UploadFolderFiltersInput {
    id: IDFilterInput
    name: StringFilterInput
    pathId: IntFilterInput
    parent: UploadFolderFiltersInput
    children: UploadFolderFiltersInput
    files: UploadFileFiltersInput
    path: StringFilterInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    and: [UploadFolderFiltersInput]
    or: [UploadFolderFiltersInput]
    not: UploadFolderFiltersInput
}

input UploadFolderInput {
    name: String
    pathId: Int
    parent: ID
    children: [ID]
    files: [ID]
    path: String
}

type UploadFolder {
    name: String!
    pathId: Int!
    parent: UploadFolderEntityResponse
    children(
        filters: UploadFolderFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
    ): UploadFolderRelationResponseCollection
    files(
        filters: UploadFileFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
    ): UploadFileRelationResponseCollection
    path: String!
    createdAt: DateTime
    updatedAt: DateTime
}

type UploadFolderEntity {
    id: ID
    attributes: UploadFolder
}

type UploadFolderEntityResponse {
    data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
    data: [UploadFolderEntity!]!
    meta: ResponseCollectionMeta!
}

type UploadFolderRelationResponseCollection {
    data: [UploadFolderEntity!]!
}

input ContentReleasesReleaseFiltersInput {
    id: IDFilterInput
    name: StringFilterInput
    releasedAt: DateTimeFilterInput
    actions: ContentReleasesReleaseActionFiltersInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    and: [ContentReleasesReleaseFiltersInput]
    or: [ContentReleasesReleaseFiltersInput]
    not: ContentReleasesReleaseFiltersInput
}

input ContentReleasesReleaseInput {
    name: String
    releasedAt: DateTime
    actions: [ID]
}

type ContentReleasesRelease {
    name: String!
    releasedAt: DateTime
    actions(
        filters: ContentReleasesReleaseActionFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
    ): ContentReleasesReleaseActionRelationResponseCollection
    createdAt: DateTime
    updatedAt: DateTime
}

type ContentReleasesReleaseEntity {
    id: ID
    attributes: ContentReleasesRelease
}

type ContentReleasesReleaseEntityResponse {
    data: ContentReleasesReleaseEntity
}

type ContentReleasesReleaseEntityResponseCollection {
    data: [ContentReleasesReleaseEntity!]!
    meta: ResponseCollectionMeta!
}

enum ENUM_CONTENTRELEASESRELEASEACTION_TYPE {
    publish
    unpublish
}

input ContentReleasesReleaseActionFiltersInput {
    id: IDFilterInput
    type: StringFilterInput
    contentType: StringFilterInput
    locale: StringFilterInput
    release: ContentReleasesReleaseFiltersInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    and: [ContentReleasesReleaseActionFiltersInput]
    or: [ContentReleasesReleaseActionFiltersInput]
    not: ContentReleasesReleaseActionFiltersInput
}

input ContentReleasesReleaseActionInput {
    type: ENUM_CONTENTRELEASESRELEASEACTION_TYPE
    contentType: String
    locale: String
    release: ID
}

type ContentReleasesReleaseAction {
    type: ENUM_CONTENTRELEASESRELEASEACTION_TYPE!
    entry: GenericMorph
    contentType: String!
    locale: String
    release: ContentReleasesReleaseEntityResponse
    createdAt: DateTime
    updatedAt: DateTime
}

type ContentReleasesReleaseActionEntity {
    id: ID
    attributes: ContentReleasesReleaseAction
}

type ContentReleasesReleaseActionEntityResponse {
    data: ContentReleasesReleaseActionEntity
}

type ContentReleasesReleaseActionEntityResponseCollection {
    data: [ContentReleasesReleaseActionEntity!]!
    meta: ResponseCollectionMeta!
}

type ContentReleasesReleaseActionRelationResponseCollection {
    data: [ContentReleasesReleaseActionEntity!]!
}

input I18NLocaleFiltersInput {
    id: IDFilterInput
    name: StringFilterInput
    code: StringFilterInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    and: [I18NLocaleFiltersInput]
    or: [I18NLocaleFiltersInput]
    not: I18NLocaleFiltersInput
}

type I18NLocale {
    name: String
    code: String
    createdAt: DateTime
    updatedAt: DateTime
}

type I18NLocaleEntity {
    id: ID
    attributes: I18NLocale
}

type I18NLocaleEntityResponse {
    data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
    data: [I18NLocaleEntity!]!
    meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
    id: IDFilterInput
    action: StringFilterInput
    role: UsersPermissionsRoleFiltersInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    and: [UsersPermissionsPermissionFiltersInput]
    or: [UsersPermissionsPermissionFiltersInput]
    not: UsersPermissionsPermissionFiltersInput
}

type UsersPermissionsPermission {
    action: String!
    role: UsersPermissionsRoleEntityResponse
    createdAt: DateTime
    updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
    id: ID
    attributes: UsersPermissionsPermission
}

type UsersPermissionsPermissionRelationResponseCollection {
    data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRoleFiltersInput {
    id: IDFilterInput
    name: StringFilterInput
    description: StringFilterInput
    type: StringFilterInput
    permissions: UsersPermissionsPermissionFiltersInput
    users: UsersPermissionsUserFiltersInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    and: [UsersPermissionsRoleFiltersInput]
    or: [UsersPermissionsRoleFiltersInput]
    not: UsersPermissionsRoleFiltersInput
}

input UsersPermissionsRoleInput {
    name: String
    description: String
    type: String
    permissions: [ID]
    users: [ID]
}

type UsersPermissionsRole {
    name: String!
    description: String
    type: String
    permissions(
        filters: UsersPermissionsPermissionFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
    ): UsersPermissionsPermissionRelationResponseCollection
    users(
        filters: UsersPermissionsUserFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
    ): UsersPermissionsUserRelationResponseCollection
    createdAt: DateTime
    updatedAt: DateTime
}

type UsersPermissionsRoleEntity {
    id: ID
    attributes: UsersPermissionsRole
}

type UsersPermissionsRoleEntityResponse {
    data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
    data: [UsersPermissionsRoleEntity!]!
    meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
    id: IDFilterInput
    username: StringFilterInput
    email: StringFilterInput
    provider: StringFilterInput
    password: StringFilterInput
    resetPasswordToken: StringFilterInput
    confirmationToken: StringFilterInput
    confirmed: BooleanFilterInput
    blocked: BooleanFilterInput
    role: UsersPermissionsRoleFiltersInput
    participant: ParticipantFiltersInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    and: [UsersPermissionsUserFiltersInput]
    or: [UsersPermissionsUserFiltersInput]
    not: UsersPermissionsUserFiltersInput
}

input UsersPermissionsUserInput {
    username: String
    email: String
    provider: String
    password: String
    resetPasswordToken: String
    confirmationToken: String
    confirmed: Boolean
    blocked: Boolean
    role: ID
    participant: ID
}

type UsersPermissionsUser {
    username: String!
    email: String!
    provider: String
    confirmed: Boolean
    blocked: Boolean
    role: UsersPermissionsRoleEntityResponse
    participant: ParticipantEntityResponse
    createdAt: DateTime
    updatedAt: DateTime
}

type UsersPermissionsUserEntity {
    id: ID
    attributes: UsersPermissionsUser
}

type UsersPermissionsUserEntityResponse {
    data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
    data: [UsersPermissionsUserEntity!]!
    meta: ResponseCollectionMeta!
}

type UsersPermissionsUserRelationResponseCollection {
    data: [UsersPermissionsUserEntity!]!
}

union GenericMorph =
    | ComponentCommonAddress
    | ComponentCommonTrainingItems
    | ComponentParticipantJobInformation
    | ComponentParticipantPersonalDetails
    | Participant
    | Training
    | UploadFile
    | UploadFolder
    | ContentReleasesRelease
    | ContentReleasesReleaseAction
    | I18NLocale
    | UsersPermissionsPermission
    | UsersPermissionsRole
    | UsersPermissionsUser

input FileInfoInput {
    name: String
    alternativeText: String
    caption: String
}

type UsersPermissionsMe {
    id: ID!
    username: String!
    email: String
    confirmed: Boolean
    blocked: Boolean
    role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
    id: ID!
    name: String!
    description: String
    type: String
}

input UsersPermissionsRegisterInput {
    username: String!
    email: String!
    password: String!
}

input UsersPermissionsLoginInput {
    identifier: String!
    password: String!
    provider: String! = "local"
}

type UsersPermissionsPasswordPayload {
    ok: Boolean!
}

type UsersPermissionsLoginPayload {
    jwt: String
    user: UsersPermissionsMe!
}

type UsersPermissionsCreateRolePayload {
    ok: Boolean!
}

type UsersPermissionsUpdateRolePayload {
    ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
    ok: Boolean!
}

input PaginationArg {
    page: Int
    pageSize: Int
    start: Int
    limit: Int
}

type Query {
    participant(id: ID): ParticipantEntityResponse
    participants(
        filters: ParticipantFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
    ): ParticipantEntityResponseCollection
    training(id: ID): TrainingEntityResponse
    trainings(
        filters: TrainingFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
    ): TrainingEntityResponseCollection
    uploadFile(id: ID): UploadFileEntityResponse
    uploadFiles(
        filters: UploadFileFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
    ): UploadFileEntityResponseCollection
    uploadFolder(id: ID): UploadFolderEntityResponse
    uploadFolders(
        filters: UploadFolderFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
    ): UploadFolderEntityResponseCollection
    contentReleasesRelease(id: ID): ContentReleasesReleaseEntityResponse
    contentReleasesReleases(
        filters: ContentReleasesReleaseFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
    ): ContentReleasesReleaseEntityResponseCollection
    contentReleasesReleaseAction(
        id: ID
    ): ContentReleasesReleaseActionEntityResponse
    contentReleasesReleaseActions(
        filters: ContentReleasesReleaseActionFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
    ): ContentReleasesReleaseActionEntityResponseCollection
    i18NLocale(id: ID): I18NLocaleEntityResponse
    i18NLocales(
        filters: I18NLocaleFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
    ): I18NLocaleEntityResponseCollection
    usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
    usersPermissionsRoles(
        filters: UsersPermissionsRoleFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
    ): UsersPermissionsRoleEntityResponseCollection
    usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
    usersPermissionsUsers(
        filters: UsersPermissionsUserFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
    ): UsersPermissionsUserEntityResponseCollection
    me: UsersPermissionsMe
}

type Mutation {
    createParticipant(data: ParticipantInput!): ParticipantEntityResponse
    updateParticipant(
        id: ID!
        data: ParticipantInput!
    ): ParticipantEntityResponse
    deleteParticipant(id: ID!): ParticipantEntityResponse
    createTraining(data: TrainingInput!): TrainingEntityResponse
    updateTraining(id: ID!, data: TrainingInput!): TrainingEntityResponse
    deleteTraining(id: ID!): TrainingEntityResponse
    createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
    updateUploadFile(id: ID!, data: UploadFileInput!): UploadFileEntityResponse
    deleteUploadFile(id: ID!): UploadFileEntityResponse
    createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse
    updateUploadFolder(
        id: ID!
        data: UploadFolderInput!
    ): UploadFolderEntityResponse
    deleteUploadFolder(id: ID!): UploadFolderEntityResponse
    createContentReleasesRelease(
        data: ContentReleasesReleaseInput!
    ): ContentReleasesReleaseEntityResponse
    updateContentReleasesRelease(
        id: ID!
        data: ContentReleasesReleaseInput!
    ): ContentReleasesReleaseEntityResponse
    deleteContentReleasesRelease(id: ID!): ContentReleasesReleaseEntityResponse
    createContentReleasesReleaseAction(
        data: ContentReleasesReleaseActionInput!
    ): ContentReleasesReleaseActionEntityResponse
    updateContentReleasesReleaseAction(
        id: ID!
        data: ContentReleasesReleaseActionInput!
    ): ContentReleasesReleaseActionEntityResponse
    deleteContentReleasesReleaseAction(
        id: ID!
    ): ContentReleasesReleaseActionEntityResponse
    upload(
        refId: ID
        ref: String
        field: String
        info: FileInfoInput
        file: Upload!
    ): UploadFileEntityResponse!
    multipleUpload(
        refId: ID
        ref: String
        field: String
        files: [Upload]!
    ): [UploadFileEntityResponse]!
    updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
    removeFile(id: ID!): UploadFileEntityResponse

    # Create a new role
    createUsersPermissionsRole(
        data: UsersPermissionsRoleInput!
    ): UsersPermissionsCreateRolePayload

    # Update an existing role
    updateUsersPermissionsRole(
        id: ID!
        data: UsersPermissionsRoleInput!
    ): UsersPermissionsUpdateRolePayload

    # Delete an existing role
    deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

    # Create a new user
    createUsersPermissionsUser(
        data: UsersPermissionsUserInput!
    ): UsersPermissionsUserEntityResponse!

    # Update an existing user
    updateUsersPermissionsUser(
        id: ID!
        data: UsersPermissionsUserInput!
    ): UsersPermissionsUserEntityResponse!

    # Delete an existing user
    deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
    login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!

    # Register a user
    register(
        input: UsersPermissionsRegisterInput!
    ): UsersPermissionsLoginPayload!

    # Request a reset password token
    forgotPassword(email: String!): UsersPermissionsPasswordPayload

    # Reset user password. Confirm with a code (resetToken from forgotPassword)
    resetPassword(
        password: String!
        passwordConfirmation: String!
        code: String!
    ): UsersPermissionsLoginPayload

    # Change user password. Confirm with the current password.
    changePassword(
        currentPassword: String!
        password: String!
        passwordConfirmation: String!
    ): UsersPermissionsLoginPayload

    # Confirm an email users email address
    emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}
